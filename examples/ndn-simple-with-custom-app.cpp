/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/**
 * Copyright (c) 2011-2014  Regents of the University of California.
 *
 * This file is part of ndnSIM. See AUTHORS for complete list of ndnSIM authors and
 * contributors.
 *
 * ndnSIM is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * ndnSIM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ndnSIM, e.g., in COPYING.md file.  If not, see <http://www.gnu.org/licenses/>.
 **/

// ndn-simple-with-custom-app.cpp

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/ndnSIM-module.h"
#include "ns3/point-to-point-module.h"

using namespace ns3;
using ns3::ndn::StackHelper;
using ns3::ndn::AppHelper;

/**
 * This scenario simulates a one-node two-custom-app scenario:
 *
 *   +------+ <-----> (CustomApp1)
 *   | Node |
 *   +------+ <-----> (CustomApp2)
 *
 *     NS_LOG=CustomApp ./waf --run=ndn-simple-with-custom-app
 */

int
main(int argc, char* argv[])
{
  // Read optional command-line parameters (e.g., enable visualizer with ./waf --run=<> --visualize
  CommandLine cmd;
  cmd.Parse(argc, argv);

  // Creating nodes
  Ptr<Node> node = CreateObject<Node>();

  // Install CCNx stack on all nodes
  StackHelper ccnxHelper;
  ccnxHelper.InstallAll();

  // Installing applications

  // Consumer
  AppHelper consumerHelper("CustomApp");
  // consumerHelper.Install (nodes.Get (0));
  ApplicationContainer app1 = consumerHelper.Install(node);
  ApplicationContainer app2 = consumerHelper.Install(node);

  app1.Start(Seconds(1.0)); // will send out Interest, which nobody will receive (Interests
                            // generated by an app will not got back to the app)
  app2.Start(
    Seconds(2.0)); // will send out an Interests, which will be received and satisfied by app1

  Simulator::Stop(Seconds(3.0));

  Simulator::Run();
  Simulator::Destroy();

  return 0;
}
